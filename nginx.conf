
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}


http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging for image proxy
    log_format image_proxy '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" '
    'rt=$request_time uct="$upstream_connect_time" '
    'uht="$upstream_header_time" urt="$upstream_response_time" '
    'cs=$upstream_cache_status';

    access_log /var/log/nginx/access.log image_proxy buffer=16k flush=5s;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    reset_timedout_connection on;
    server_tokens off;

    # Client settings for image serving
    client_body_buffer_size 16k;
    client_max_body_size 1m;
    client_body_timeout 12s;
    client_header_timeout 12s;
    send_timeout 10s;

    # Rate limiting for image requests
    limit_req_zone $binary_remote_addr zone=imageproxy:20m rate=100r/s;
    limit_req_status 429;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 200;

    # Map for connection upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Map for X-Forwarded-For
    map $remote_addr $proxy_forwarded_elem {
        ~^[0-9.]+$ "for=$remote_addr";
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";
        default "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        default "$proxy_forwarded_elem";
    }

    # Map for valid image sizes
    map $fill_size $is_valid_size {
        default 0;

        # Retina sizes
        "312:176:1" 1;
        "458:258:1" 1;
        "592:334:1" 1;
        "624:352:1" 1;
        "702:396:1" 1;
        "732:414:1" 1;
        "780:440:1" 1;
        "808:456:1" 1;
        "912:514:1" 1;
        "1070:604:1" 1;

        # Non-retina sizes
        "229:129:1" 1;
        "296:167:1" 1;
        "351:198:1" 1;
        "366:207:1" 1;
        "390:220:1" 1;
        "404:228:1" 1;
        "456:257:1" 1;
        "535:302:1" 1;
    }

    # Image proxy cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=imgproxy_cache:100m max_size=50g inactive=30d use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_methods GET HEAD;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 5s;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 2;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_background_update on;

    # Upstream for IMGProxy
    upstream imageproxy_backend {
        server imageproxy:8080;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    server {
        listen 8080 default_server;
        server_name _;

        # Security headers for image proxy
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;

        # Hide server information
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Rate limiting
        limit_req zone=imageproxy burst=200 nodelay;
        limit_conn addr 100;

        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Block hidden files
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Only allow GET, HEAD, OPTIONS for image proxy
        if ($request_method !~ ^(GET|HEAD|OPTIONS)$) {
            return 405;
        }

        # Root returns 404
        location = / {
            return 200 "Nginx is alive!\n";
            add_header Content-Type text/plain;
        }

        # favicon.ico
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }

        # robots.txt - disallow all
        location = /robots.txt {
            access_log off;
            log_not_found off;
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /\n";
        }

        # Image proxy endpoint
        location ~ ^/uzgdblnadf/rs:fill:(?<fill_size>\d+:\d+:1)/gravity:sm/format:webp/plain/(.+)$ {
            # Validate image size
            # Disable Size limitations for now
            # if ($is_valid_size = 0) {
            #     return 403;
            # }

            # CORS for images
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Max-Age "86400" always;

            # Handle OPTIONS preflight
            if ($request_method = 'OPTIONS') {
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            # Browser cache settings for images
            expires 30d;
            add_header Cache-Control "public, max-age=2592000, immutable" always;
            add_header Vary "Accept-Encoding" always;

            # Cache status (can remove in production)
            add_header X-Cache-Status $upstream_cache_status always;

            # Nginx cache settings
            proxy_cache imgproxy_cache;
            proxy_cache_valid 200 206 301 302 30d;
            proxy_cache_valid 404 1h;
            proxy_cache_valid any 1m;
            proxy_cache_bypass $http_cache_control;
            proxy_no_cache $http_cache_control;

            # Proxy to ImageProxy
            proxy_pass http://imageproxy_backend;

            # Proxy headers
            proxy_set_header Host d3hnpdhjpc14ws.cloudfront.net;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Connection "";

            # Proxy performance for images
            proxy_http_version 1.1;
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            proxy_busy_buffers_size 32k;
            proxy_temp_file_write_size 64k;
            proxy_max_temp_file_size 1024m;

            # Proxy timeouts for images
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Error handling
            proxy_intercept_errors on;
            error_page 404 = @404;
            error_page 500 502 503 504 = @50x;
        }

        # Custom error responses
        location @404 {
            internal;
            return 404;
            add_header Content-Type text/plain;
        }

        location @50x {
            internal;
            return 503;
            add_header Content-Type text/plain;
            add_header Retry-After 5;
        }
    }
}
