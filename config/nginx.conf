worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10240;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format with captured variables
    log_format image_proxy_enhanced '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
    'rt=$request_time uct="$upstream_connect_time" '
    'uht="$upstream_header_time" urt="$upstream_response_time" '
    'cs=$upstream_cache_status size=$fill_size gravity=$gravity format=$format';

    access_log /var/log/nginx/access.log image_proxy_enhanced buffer=16k flush=5s;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75;
    keepalive_requests 1000;
    reset_timedout_connection on;
    server_tokens off;

    # File cache not needed for pure proxy setup

    # Client settings
    client_body_buffer_size 16k;
    client_max_body_size 1m;
    client_body_timeout 12s;
    client_header_timeout 12s;
    send_timeout 10s;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=imageproxy:20m rate=1000r/s;
    limit_req_status 429;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # URL source validation (CRITICAL for SSRF prevention)
    map $request_uri $is_valid_source {
        default 0;

        # Only allow WKO source domains (NOT CDN domains to prevent loops)
        ~*/plain/https://www\.wko\.at/ 1;
        ~*/plain/https://[a-zA-Z0-9-]+\.wko\.at/ 1;

        # Explicitly block CDN domains to prevent infinite loops
        ~*/plain/https://cdn\. 0;

        # Add other trusted SOURCE domains here as needed
        # ~*/plain/https://trusted-source-domain\.com/ 1;
    }

    # Format validation
    map $format $is_valid_format {
        default 0;
        "webp" 1;
        "jpg" 1;
        "jpeg" 1;
        "png" 1;
        "avif" 1;
    }

    # CORS origin validation (more secure than wildcard)
    map $http_origin $cors_origin {
        default "";

        # Allow WKO domains
        "~^https://[a-zA-Z0-9-]+\.wko\.at$" $http_origin;
        "~^https://wko\.at$" $http_origin;

        # Add other trusted domains
        # "~^https://trusted-domain\.com$" $http_origin;
    }

    # Size validation map (keep for future use)
    map $fill_size $is_valid_size {
        default 0;

        # Retina sizes
        "312:176:1" 1;
        "458:258:1" 1;
        "592:334:1" 1;
        "624:352:1" 1;
        "702:396:1" 1;
        "732:414:1" 1;
        "780:440:1" 1;
        "808:456:1" 1;
        "912:514:1" 1;
        "1070:604:1" 1;

        # Non-retina sizes
        "229:129:1" 1;
        "296:167:1" 1;
        "351:198:1" 1;
        "366:207:1" 1;
        "390:220:1" 1;
        "404:228:1" 1;
        "456:257:1" 1;
        "535:302:1" 1;
    }

    # Image proxy cache configuration
    proxy_cache_path /var/cache/nginx
    levels=1:2
    keys_zone=imgproxy_cache:200m
    max_size=50g
    inactive=10d
    use_temp_path=off
    loader_threshold=1000m
    loader_files=1000;

    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_methods GET HEAD;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 5s;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 1;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_background_update on;

    # Upstream configuration
    upstream imageproxy_backend {
        server imgproxy:80;
        keepalive 128;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    server {
        listen 8080 default_server;
        server_name _;

        # Enhanced security headers
        # add_header X-Content-Type-Options "nosniff" always;
        # add_header X-Frame-Options "DENY" always;
        # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'none'; img-src *; style-src 'unsafe-inline'" always;
        # # add_header Cross-Origin-Resource-Policy "cross-origin" always;
        # add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;

        # Hide server information
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Rate limiting
        limit_req zone=imageproxy burst=2000 nodelay;
        limit_conn addr 500;

        # Health check endpoint
        location = /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "OK\n";
        }

        # Root endpoint
        location = / {
            add_header Content-Type text/plain;
            return 200 "WKO Inhouse CDN is alive!\n";
        }

        # Temporary log access endpoints for production testing
        location = /access-log {
            allow all;

            access_log off;
            add_header Content-Type text/plain;
            alias /var/log/nginx/access.log;
        }

        location = /error-log {
            allow all;

            access_log off;
            add_header Content-Type text/plain;
            alias /var/log/nginx/error.log;
        }

        # Utility endpoints (favicon, robots)
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }

        location = /robots.txt {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /\n";
        }

        # Block hidden files and unwanted requests
        location ~* ^/(\.|_|\w+\.php|\.git|\.env|\.htaccess|\.htpasswd|\.user.ini) {
            access_log off;
            return 404;
        }

        # Block Apple Preview icons
        location ~* ^/(Icon\r?\n|Icon\r|\._) {
            access_log off;
            return 404;
        }

        # Main image proxy endpoint
        location ~ ^/uzgdblnadf/rs:fill:(?<fill_size>\d+:\d+:1)/gravity:(?<gravity>\w+)/format:(?<format>\w+)/plain/(.+)$ {
            # Only allow GET, HEAD, OPTIONS
            limit_except GET HEAD OPTIONS {
                deny all;
            }

            # Security validations
            # if ($is_valid_source = 0) {
            #     return 403 "Forbidden source";
            # }

            # if ($is_valid_format = 0) {
            #     return 400 "Invalid format";
            # }
            # Secure CORS headers (using validated origins)
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, HEAD" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Access-Control-Allow-Headers "Cache-Control" always;

            # Browser cache settings
            expires 30d;
            add_header Cache-Control "public, max-age=2592000, immutable" always;
            add_header Vary "Accept-Encoding" always;

            # Cache status header (keep for monitoring)
            add_header X-Cache-Status $upstream_cache_status always;

            # Nginx cache settings
            proxy_cache imgproxy_cache;
            proxy_ignore_headers Cache-Control;
            proxy_cache_valid 200 206 301 302 30d;
            proxy_cache_valid 404 1h;
            proxy_cache_valid any 1m;

            # Proxy to ImageProxy
            proxy_pass http://imageproxy_backend;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Connection "";

            # Improved proxy performance
            proxy_http_version 1.1;
            proxy_buffering on;
            proxy_buffer_size 32k; # Increased
            proxy_buffers 16 32k; # More buffers
            proxy_busy_buffers_size 64k; # Doubled
            proxy_temp_file_write_size 128k; # Doubled
            proxy_max_temp_file_size 1024m;

            # Proxy timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Error handling
            proxy_intercept_errors on;
            error_page 404 = @404;
            error_page 500 502 503 504 = @50x;
        }

        # Custom error responses
        location @404 {
            internal;
            add_header Content-Type text/plain;
            return 404;
        }

        location @50x {
            internal;
            add_header Content-Type text/plain;
            add_header Retry-After 5;
            return 503;
        }
    }
}